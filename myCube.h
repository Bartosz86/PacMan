#ifndef MYCUBE_H
#define MYCUBE_H

unsigned int myCubeVertexCount=24;

float myCubeVertices[]={
	-1,-1,-1,
	1,-1,-1,
	1,1,-1,
	-1,1,-1,

	-1,-1,1,
	1,-1,1,
	1,1,1,
	-1,1,1,

	-1,-1,-1,
	1,-1,-1,
	1,-1,1,
	-1,-1,1,

	-1,1,-1,
	1,1,-1,
	1,1,1,
	-1,1,1,

	-1,-1,-1,
	-1,-1,1,
	-1,1,1,
	-1,1,-1,

	1,-1,-1,
	1,-1,1,
	1,1,1,
	1,1,-1,
};

float myCubeColors[]={
	1,0,0, 1,0,0, 1,0,0, 1,0,0,
	0,1,0, 0,1,0, 0,1,0, 0,1,0,
	0,0,1, 0,0,1, 0,0,1, 0,0,1,
	1,1,0, 1,1,0, 1,1,0, 1,1,0,
	0,1,1, 0,1,1, 0,1,1, 0,1,1,
	1,1,1, 1,1,1, 1,1,1, 1,1,1
};

float myCubeCoords[]={
    0,0, 1,0, 1,1, 0,1,
    0,0, 1,0, 1,1, 0,1,
    0,0, 1,0, 1,1, 0,1,
    0,0, 1,0, 1,1, 0,1,
    0,0, 1,0, 1,1, 0,1,
    0,0, 1,0, 1,1, 0,1
};

//Tablica z wektorami normalnymi w ka¿dym wierzcho³ku
float myCubeNormals[]={  // trzeba normalne wierzcholka
                            // jest trick ale tylko dla foremnych w poczaatku ukladu ;d
 0,0,-1, 0,0,-1, 0,0,-1, 0,0,-1,
 0,0,1, 0,0,1, 0,0,1, 0,0,1,
 0,-1,0, 0,-1,0, 0,-1,0, 0,-1,0,
 0,1,0, 0,1,0, 0,1,0, 0,1,0,
 -1,0,0, -1,0,0, -1,0,0, -1,0,0,
 1,0,0, 1,0,0, 1,0,0, 1,0,0
 };

#endif
